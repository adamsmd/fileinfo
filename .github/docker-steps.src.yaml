on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar

  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps: &docker-steps
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0

      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "Container launch failed."
            false
          fi
        # echo "required=$required"
        # echo "::debug::cont=$cont"
        # echo "::debug::required=$required"
      # - name: Fail if required but missing
      #   # if: ${{ env.required == 1 && env.cont == 0 }}
      #   if: ${{ env.cont == 0 }}
      #   run: 'false'

      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a

      # # Create the working directory
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=/workdir" >> $GITHUB_ENV
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=$workdir"
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

      # # Copy the artifact to the working directory
      # - if: ${{ env.cont != 0 }}
      #   uses: actions/download-artifact@v2
      #   with: { name: bootstrap-output }
      # - if: ${{ env.cont != 0 }}
      #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

      # # Install dependencies
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

      # # Build
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" ./configure
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make check

      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
