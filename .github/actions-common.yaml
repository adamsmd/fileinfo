on: [workflow_dispatch]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git --owner 0 --group 0 .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar

  is-act:
    runs-on: ubuntu-latest
    outputs: { result: "${{ env.ACT }}" }
    steps: [{ run: true }] ## Keep the schema happy

  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps: &docker-steps
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0

      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "::set-output name=cont::$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi

      # Check platforms
      - run: uname -a
      - run: id
      - run: docker exec "$cont" uname -a
      - run: docker exec "$cont" id
      - run: echo "uid=$(docker exec "$cont" id -u)" >> $GITHUB_ENV
      - run: echo "gid=$(docker exec "$cont" id -g)" >> $GITHUB_ENV
      - run: echo "::set-output name=uid::$user"
      - run: echo "::set-output name=gid::$user"

      # Copy the artifact to the container
      #
      # The extra dance we do here is to get around the fact that (1) not all
      # images use the `root` user and (2) not all images have `sudo`.  Thus, we
      # want to make sure we copy the files already with the right user and
      # group.
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: mkdir -p root/fileinfo
      - run: cd root/fileinfo && tar -xf ../../fileinfo.tar
      - run: cd root          && tar -cf ../fileinfo-uid.tar fileinfo --owner="$uid" --group="$gid"
      - run: docker cp - "$cont":/ <fileinfo-uid.tar

      # Build
      - run: echo "exec=docker exec --workdir=/fileinfo $cont" >> $GITHUB_ENV

      - run: $exec /fileinfo/bin/install-deps
      - run: $exec ./configure || { $exec cat config.log; false; }
      - run: $exec cat src/config.h
      - run: $exec cat src/headers.h
      - run: $exec cat src/fileinfo/static.h
      - run: $exec make
      - run: $exec make check
      - run: $exec ./fileinfo-fields-dynamic
      - run: $exec ./fileinfo-file-dynamic .

      # Cleanup
      - run: docker stop "$cont"
      - run: docker rm --force --volumes "$cont"
