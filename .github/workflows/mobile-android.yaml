on: [workflow_dispatch]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git --owner 0 --group 0 .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  is-act:
    runs-on: ubuntu-latest
    outputs: {result: "${{ env.ACT }}"}
    steps: [{run: true}] ## Keep the schema happy
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "::set-output name=cont::$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: uname -a
      - run: id
      - run: docker exec "$cont" uname -a
      - run: docker exec "$cont" id
      - run: echo "uid=$(docker exec "$cont" id -u)" >> $GITHUB_ENV
      - run: echo "gid=$(docker exec "$cont" id -g)" >> $GITHUB_ENV
      - run: echo "::set-output name=uid::$user"
      - run: echo "::set-output name=gid::$user"
      # Copy the artifact to the container
      #
      # The extra dance we do here is to get around the fact that (1) not all
      # images use the `root` user and (2) not all images have `sudo`.  Thus, we
      # want to make sure we copy the files already with the right user and
      # group.
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: mkdir -p root/fileinfo
      - run: cd root/fileinfo && tar -xf ../../fileinfo.tar
      - run: cd root          && tar -cf ../fileinfo-uid.tar fileinfo --owner="$uid" --group="$gid"
      - run: docker cp - "$cont":/ <fileinfo-uid.tar
      # Build
      - run: echo "exec=docker exec --workdir=/fileinfo $cont" >> $GITHUB_ENV
      - run: $exec /fileinfo/bin/install-deps
      - run: $exec ./configure || { $exec cat config.log; false; }
      - run: $exec cat src/config.h
      - run: $exec cat src/headers.h
      - run: $exec cat src/fileinfo/static.h
      - run: $exec make
      - run: $exec make check
      - run: $exec ./fileinfo-fields-dynamic
      - run: $exec ./fileinfo-file-dynamic .
      # Cleanup
      - run: docker stop "$cont"
      - run: docker rm --force --volumes "$cont"
  android:
    needs: [bootstrap, is-act]
    runs-on: ${{ needs.is-act.outputs.result && 'ubuntu-latest' || 'macos-latest' }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86
          # - x86_64 # (requires: API 21+)
          # - arm64-v8a # (require Android 4.2+ (API 17+) and are limited to fewer API levels (e.g. 30))
        type: # Device type
          - default # works (API 29)
          # - google_apis # works (API 29)
          # - playstore # works (API 29)
          # - android-wear
          # - android-wear-cn
          # - android-tv # works (API 29)
          # - google-tv
          ## - aosp_atd (requires: api-level: 30, arch: x86)
          ## - google_atd (requires: api-level: 30, arch: x86)
        api: # Minimum API level supported is 15 (Android 4.0.3)
          # - 15 # missing llvm-ranlib
          # - 16 # missing llvm-ranlib
          # - 17 # missing llvm-ranlib
          # - 18 # missing llvm-ranlib
          # - 19
          # - 20
          # - 21
          # - 22
          # - 23
          # - 24
          # - 25
          # - 26 # works: x86/default
          # - 27 # works: x86/default
          # - 28 # works: x86/default
          - 29 # works: x86/default
          # - 30
          # - 31
    env:
      API: ${{ matrix.api }}
      ARCH: ${{ matrix.arch }}
      NDK: ${{ matrix.api <= 19 && '16.1.4479499' || '23.1.7779620' }}
      # https://developer.android.com/ndk/downloads/revision_history
      # https://github.com/android/ndk/wiki/Unsupported-Downloads
      # Android NDK r16b (December 2017) (API 14-27) NDK: 16.1.4479499
      # Android NDK r23 LTS (August 2021) (API 16+) NDK: 23.1.7779620

      DEST_DIR: /data/local/tmp # A directory which is writable and not noexec
    steps:
      ## Ensure $ANDROID_SDK_ROOT is setup as it is missing on `act`
      - run: echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}" >> $GITHUB_ENV
      - run: sudo mkdir -p "$ANDROID_SDK_ROOT" || true
      - run: sudo chmod a+rwx "$ANDROID_SDK_ROOT"
      - if: ${{ env.ACT }}
        run: sudo apt-get update
      - if: ${{ env.ACT }}
        run: sudo apt-get install --assume-yes default-jre # Needed by android-emulator-runner
      - if: ${{ env.ACT }}
        run: sudo apt-get install --assume-yes libncurses5 # Some `clang` need this
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: tar -xvf fileinfo.tar
      - uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API }}
          target: ${{ matrix.type }}
          ndk: ${{ env.NDK }}
          script: |
            .github/configure-android
            cat src/config.h
            cat src/headers.h
            cat src/fileinfo/static.h
            make
            make check

            adb push fileinfo-fields-dynamic "$DEST_DIR"/
            adb shell chmod a+x "$DEST_DIR"/fileinfo-fields-dynamic
            adb shell "$DEST_DIR"/fileinfo-fields-dynamic

            adb push fileinfo-file-dynamic "$DEST_DIR"/
            adb shell chmod a+x "$DEST_DIR"/fileinfo-file-dynamic
            adb shell "$DEST_DIR"/fileinfo-file-dynamic .
