## Note that symbolic names are often duplicates of the numeric names.
## We keep both so that we automatically test new versions when those
## symbolic names get updated to newer versions.

## https://github.com/docker-library/official-images#architectures-other-than-amd64
## https://github.com/docker-library/bashbrew/blob/v0.1.2/architecture/oci-platform.go

## amd64         = linux/amd64
## arm32v5       = linux/arm/v5
## arm32v6       = linux/arm/v6
## arm32v7       = linux/arm/v7
## arm64v8       = linux/arm64/v8
## i386          = linux/386
## mips64le      = linux/mips64le
## ppc64le       = linux/ppc64le
## riscv64       = linux/riscv64
## s390x         = linux/s390x
## windows-amd64 = windows/amd64
on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: |
          # don't use --mode since it is not compatible
          docker exec "$cont" mkdir "$workdir" || \
            docker exec --user=root "$cont" mkdir "$workdir"
      - if: ${{ env.cont != 0 }}
        run: |
          docker exec "$cont" chmod 0777 "$workdir" || \
            docker exec --user=root "$cont" chmod 0777 "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
  android:
    needs: bootstrap
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: tar -xvf fileinfo.tar
      - run: echo ++++++++++++++ ${{ env.ANDROID_SDK_ROOT }}
      - uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          ndk: 23.1.7779620
          script: |
            echo true
            echo "$PATH"
            echo -------------- ${{ process.env.ANDROID_SDK_ROOT }}
            pwd
            ls -al
            which llvm-ranlib || true
            which llvm-ar || true

            ls -al /Users/runner/Library/Android/
            ls -al /Users/runner/Library/Android/sdk/
            ls -al /Users/runner/Library/Android/sdk/tools/
            ls -al /Users/runner/Library/Android/sdk/tools/bin/
            ls -al /Users/runner/Library/Android/sdk/platform-tools/
            ls -al /Users/runner/Library/Android/sdk/ndk-bundle/
            ls -al /Users/runner/Library/Android/sdk/ndk-bundle/prebuilt/
            ls -al /Users/runner/Library/Android/sdk/cmdline-tools/latest/
            ls -al /Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/

            find /Users/runner/Library/Android/ -name \*clang || true
            find /Users/runner/Library/Android/ -name \*ranlib || true

            ./configure --host="i686-linux-android"
            cat src/config.h
            cat src/headers.h
            cat src/fileinfo/static.h
            make
            make check

            file fileinfo-fields-dynamic

# android:
#   needs: bootstrap
#   runs-on: macos-11
#   # runs-on: ubuntu-latest # TODO: macos-latest
#   # strategy:
#   #   fail-fast: false
#   #   matrix:
#   env:
#     ANDROID_SDK_ROOT: /android # /Users/runner/Library/Android/sdk/
#     API: 29 # 15-31 ## minSdkVersion
#     NDK_VERSION: 23.1.7779620

#     ## Only choose one of these, depending on your device...
#     # TARGET: aarch64-linux-android
#     # TARGET: armv7a-linux-androideabi
#     TARGET: i686-linux-android
#     # TARGET: x86_64-linux-android

#     ## Only choose one of these, depending on your build machine...
#     BUILD: darwin-x86_64
#     # BUILD: linux-x86_64
#   steps:
#     # - run: |
#     #     echo PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV

#     #     BIN_DIR="/android/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/${{ env.BUILD }}/bin"
#     #     echo     AR="$BIN_DIR/llvm-ar" >> $GITHUB_ENV
#     #     echo     CC="$BIN_DIR/${{ env.TARGET }}${{ env.API }}-clang" >> $GITHUB_ENV
#     #     echo     AS="$BIN_DIR/${{ env.TARGET }}${{ env.API }}-clang" >> $GITHUB_ENV
#     #     echo    CXX="$BIN_DIR/${{ env.TARGET }}${{ env.API }}-clang++" >> $GITHUB_ENV
#     #     echo     LD="$BIN_DIR/ld" >> $GITHUB_ENV
#     #     echo RANLIB="$BIN_DIR/llvm-ranlib" >> $GITHUB_ENV
#     #     echo  STRIP="$BIN_DIR/llvm-strip" >> $GITHUB_ENV

#     # - run: whoami
#     # - run: sudo mkdir "$ANDROID_SDK_ROOT"
#     # - run: sudo ls -al "$ANDROID_SDK_ROOT"
#     # - run: sudo chmod a+rwx "$ANDROID_SDK_ROOT"
#     # - run: sudo apt-get update
#     # - run: sudo apt-get install --assume-yes openjdk-11-jre

#     - uses: reactivecircus/android-emulator-runner@v2
#       with:
#         api-level: ${{ env.API }}
#         ndk: ${{ env.NDK_VERSION }}
#         script: |
#           ## Configure and build.
#           ./configure --host="${{ env.TARGET }}"
#           cat src/config.h
#           cat src/headers.h
#           cat src/fileinfo/static.h
#           make
#           make check

#           adb push fileinfo-fields-dynamic /data/local/tmp/
#           adb shell chmod a+x /data/local/tmp/fileinfo-fields-dynamic
#           adb shell /data/local/tmp/fileinfo-fields-dynamic
