on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
  docker-multiarch-alpine:
    env: {image: "multiarch/alpine:${{ matrix.arch }}-${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - i386
          - ppc64le
          - arm64
          - x86_64
          - armv7
          - armhf
          - aarch64
          - x86
        version:
          - latest-stable
          - edge
          - v3.14
          - v3.13
          - v3.12
          - v3.11
  docker-multiarch-ubuntu-core:
    env: {platform: amd64, image: "multiarch/ubuntu-core:${{ matrix.arch }}-${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - arm64
          - armhf
          - i386
          - ppc64el
          - s390x
          - x86_64
        version:
          - bionic
          - focal
          - trusty
          - xenial
  docker-multiarch-ubuntu-debootstrap:
    env: {platform: amd64, image: "multiarch/ubuntu-debootstrap:${{ matrix.arch }}-${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - amd64
          - arm64
          - armhf
          - i386
          - ppc64el
          - powerpc
        version:
          - bionic
          - bionic-slim
          - focal
          - focal-slim
          - trusty
          - trusty-slim
          - xenial
          - xenial-slim
  docker-multiarch-debian-debootstrap:
    env: {platform: amd64, image: "multiarch/debian-debootstrap:${{ matrix.arch }}-${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - amd64
          - arm64
          - armel
          - armhf
          - i386
          - mips
          - mips64el
          - mipsel
          - powerpc
          - ppc64el
          - s390x
        version:
          - bullseye
          - bullseye-slim
          - buster
          - buster-slim
          - sid
          - sid-slim
          - stretch
          - stretch-slim
  docker-multiarch-fedora:
    env: {platform: amd64, image: "multiarch/fedora:${{ matrix.version }}-${{ matrix.arch }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - aarch64
          - ppc64le
          - s390x
          - x86_64
        version:
          - 34
          - 33
          - 32
          - 31
          - 30
          - 29
          - 28
  docker-multiarch-centos:
    env: {required: 1, platform: amd64, image: "multiarch/centos:${{ matrix.version }}-clean"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        version:
          - 7
          - 7-aarch64
          - 7-amd64
          - 7-armhfp
          - 7-i386
          - 7-ppc64
          - 7-ppc64le
          - 7.3
          - 7.3-aarch64
          - 7.3-amd64
          - 7.3-armhfp
          - 7.3-ppc64
          - 7.3-ppc64le
          - 7.6
          - 7.6-amd64
          - 7.6-armhfp
          - aarch64
          - amd64
          - armhfp
          - i386
          - latest
          - ppc64
          - ppc64le
  docker-multiarch-voidlinux:
    env: {required: 1, platform: amd64, image: "multiarch/voidlinux:${{ matrix.tag }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        tag:
          - amd64-latest
          - armhf-latest

# ## No package mangager
# docker-multiarch-busybox:
#   env: { required: 1, platform: amd64, image: "multiarch/busybox:${{ matrix.tag }}" }
#   needs: bootstrap
#   runs-on: ubuntu-latest
#   steps: *docker-steps
#   strategy:
#     fail-fast: false
#     matrix:
#       platform:
#         - amd64
#       tag:
#         - alpha
#         - alpha-slim
#         - amd64
#         - amd64-slim
#         - arm64
#         - arm64-slim
#         - armel
#         - armel-slim
#         - armhf
#         - armhf-slim
#         - hppa
#         - hppa-slim
#         - hurd-i386
#         - hurd-i386-slim
#         - i386
#         - i386-slim
#         - kfreebsd-amd64
#         - kfreebsd-amd64-slim
#         - kfreebsd-i386
#         - kfreebsd-i386-slim
#         - m68k
#         - m68k-slim
#         - mips
#         - mips-slim
#         - mipsel
#         - mipsel-slim
#         - powerpc
#         - powerpc-slim
#         - powerpcspe
#         - powerpcspe-slim
#         - ppc64
#         - ppc64-slim
#         - ppc64el
#         - ppc64el-slim
#         - s390x
#         - s390x-slim
#         - sh4
#         - sh4-slim
#         - sparc64
#         - sparc64-slim
#         - sparc64-slim-slim
#         - x32
#         - x32-slim
