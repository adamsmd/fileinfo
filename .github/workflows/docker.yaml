on: [workflow_dispatch]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  is-act:
    runs-on: ubuntu-latest
    outputs: {result: "${{ env.ACT }}"}
    steps: [{run: true}] ## Keep the schema happy
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
  ## Unsupported images:
  ##
  ## qemu/*:latest # docker of QEmu not a docker of an image that runs on QEmu

  ## Note that openwrt/rootfs is a duplicate of openwrtorg/rootfs.
  docker-openwrtorg:
    env: {image: "openwrtorg/rootfs:${{ matrix.arch }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        arch:
          - aarch64_cortex-a53
          ## - aarch64_generic # Packages for gcc found, but incompatible with the architectures configured
          - arm_cortex-a15_neon-vfpv4
          - armvirt-32
          - armvirt-64
          - i386_pentium-mmx
          - i386_pentium4
          - malta-be
          ## - mips_24kc # Container does not stay running for some reason
          - x86_64
          - x86-64
          - x86-generic
          - x86-geode
  docker-openmandriva:
    env: {image: "openmandriva/${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
        version:
          - cooker:latest
        include:
          - {version: '4.0:latest', platform: amd64}
          ## - { version: 3.0:latest, platform: amd64 } # update fails
          - {version: '3.0:aarch64', platform: arm64}
  docker-opensuse:
    env: {image: "opensuse/${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        version:
          - leap:latest
          - leap:15
          - leap:42
          - tumbleweed
          - s390x
  docker-slackware:
    env: {image: "vbatts/slackware:${{ matrix.version }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        version:
          ## - current # update fails, unstable branch
          - latest
          - '14.2'
          - '14.1'
          - '14.0'
          - '13.1'
          - '13.0'
  # TODO
  docker-chromebrew: # ChromeOS
    env: {image: "chromebrew/chromeos-${{ matrix.version }}:latest"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
        version:
          # - armv7l-fievel-m92
          # - i686-alex-m58
          - x86_64-kip-m92 # works
          - x86_64-nocturne-m90 # works
        # include:
        #   - { version: armv7l-fievel-m91, platform: arm }
  docker-gentoo:
    env: {image: "gentoo/stage3:${{ matrix.tag }}"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        tag: [latest]
        include:
          - {tag: amd64-openrc, platform: amd64}
          - {tag: arm64-systemd, platform: arm64}
          - {tag: arm64, platform: arm64}
          - {tag: armv6j_hardfp-openrc, platform: arm}
          - {tag: armv6j_hardfp-systemd, platform: arm}
          - {tag: armv7a-systemd, platform: arm}
          - {tag: hardened-nomultilib, platform: amd64}
          - {tag: hardened, platform: 386}
          - {tag: hardened, platform: amd64}
          - {tag: i686-hardened-openrc, platform: 386}
          - {tag: i686-musl, platform: 386}
          - {tag: i686-openrc, platform: 386}
          - {tag: i686-systemd, platform: 386}
          - {tag: latest, platform: 386}
          - {tag: latest, platform: amd64}
          - {tag: latest, platform: arm/v5}
          - {tag: latest, platform: arm/v6}
          - {tag: latest, platform: arm/v7}
          - {tag: latest, platform: arm64}
          - {tag: latest, platform: ppc64le}
          - {tag: latest, platform: riscv64}
          - {tag: latest, platform: s390x}
          - {tag: musl-hardened, platform: amd64}
          - {tag: musl-hardened, platform: ppc64le}
          - {tag: musl, platform: 386}
          - {tag: musl, platform: amd64}
          - {tag: nomultilib-systemd, platform: amd64}
          - {tag: ppc64le-musl-hardened-openrc, platform: ppc64le}
          - {tag: ppc64le-openrc, platform: ppc64le}
          - {tag: ppc64le-systemd, platform: ppc64le}
          - {tag: rv64_lp64-openrc, platform: riscv64}
          - {tag: rv64_lp64-systemd, platform: riscv64}
          - {tag: rv64_lp64d-openrc, platform: riscv64}
          - {tag: rv64_lp64d-systemd, platform: riscv64}
          - {tag: s390x, platform: s390x}
          - {tag: systemd, platform: 386}
          - {tag: systemd, platform: amd64}
          - {tag: systemd, platform: arm/v5}
          - {tag: systemd, platform: arm/v6}
          - {tag: systemd, platform: arm/v7}
          - {tag: systemd, platform: arm64}
          - {tag: systemd, platform: ppc64le}
          - {tag: systemd, platform: riscv64}
  docker-voidlinux:
    env: {image: "voidlinux/${{ matrix.version }}:latest"}
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        version:
          - voidlinux
          - voidlinux-musl

## TODO: KaOS
## TODO: pclinuxos
## TODO: solus
## TODO: mint

# https://github.com/palmercluff/qemu-images

# Multics: https://hub.docker.com/r/rattydave/alpine-multics
# Cray 1: https://hub.docker.com/r/rattydave/cray1
# VM/370: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-vm370
# MVS: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-mvs
# System/370: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-tss
# Multiple: https://hub.docker.com/r/rattydave/alpine-simh
# Cloud 9: https://hub.docker.com/r/rattydave/cloud9

# Multics:
# - https://hackaday.com/2021/08/07/multics-gets-a-new-release-52-years-after-launch/
# - https://multics-wiki.swenson.org/index.php/Main_Page#Latest_Release
# - https://en.wikipedia.org/wiki/Multics
# - https://web.mit.edu/multics-history/source/Multics_Internet_Server/Multics_sources.html 
# - https://www.multicians.org/
# - http://ringzero.wikidot.com/start

# TODO: compiler: gcc, llvm, icc
# TODO: pre-statx linux (and other kernel implementations)
# TODO: WSLv1, WSLv2, different bash ports (MSYS,MingW,Cygwin,GitBash)
# TODO: filesystems: zfs, btrfs, ext4
