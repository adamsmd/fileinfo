## Note that symbolic names are often duplicates of the numeric names.
## We keep both so that we automatically test new versions when those
## symbolic names get updated to newer versions.

## https://github.com/docker-library/official-images#architectures-other-than-amd64
## https://github.com/docker-library/bashbrew/blob/v0.1.2/architecture/oci-platform.go

## amd64         = linux/amd64
## arm32v5       = linux/arm/v5
## arm32v6       = linux/arm/v6
## arm32v7       = linux/arm/v7
## arm64v8       = linux/arm64/v8
## i386          = linux/386
## mips64le      = linux/mips64le
## ppc64le       = linux/ppc64le
## riscv64       = linux/riscv64
## s390x         = linux/s390x
## windows-amd64 = windows/amd64
on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # # Create the working directory
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=/workdir" >> $GITHUB_ENV
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=$workdir"
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

      # # Copy the artifact to the working directory
      # - if: ${{ env.cont != 0 }}
      #   uses: actions/download-artifact@v2
      #   with: { name: bootstrap-output }
      # - if: ${{ env.cont != 0 }}
      #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

      # # Install dependencies
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

      # # Build
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" ./configure
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make check

      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
  # shell:
  #   needs: bootstrap
  #   runs-on: windows-2019
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with: { name: bootstrap-output }
  #     - name: Setup tmate session
  #       uses: mxschmitt/action-tmate@v3

  windows:
    needs: bootstrap
    runs-on: windows-2019
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - shell: C:\msys64\usr\bin\bash.exe {0}
        run: |
          set +e
          set -x
          echo "$PATH"
          PATH='/c/Program Files/MongoDB/Server/5.0/bin:/c/aliyun-cli:/c/vcpkg:/c/cf-cli:/c/Program Files (x86)/NSIS:/c/tools/zstd:/c/Program Files/Mercurial:/c/hostedtoolcache/windows/stack/2.7.3/x64:/c/cabal/bin:/c/ghcup/bin:/c/tools/ghc-9.2.1/bin:/c/Program Files/dotnet:/c/mysql/bin:/c/Program Files/R/R-4.1.2/bin/x64:/c/SeleniumWebDrivers/GeckoDriver:/c/Program Files (x86)/sbt/bin:/c/Program Files (x86)/GitHub CLI:/c/Program Files (x86)/pipx_bin:/c/hostedtoolcache/windows/go/1.15.15/x64/bin:/c/hostedtoolcache/windows/Python/3.7.9/x64/Scripts:/c/hostedtoolcache/windows/Python/3.7.9/x64:/c/hostedtoolcache/windows/Ruby/2.5.9/x64/bin:/c/tools/kotlinc/bin:/c/hostedtoolcache/windows/Java_Temurin-Hotspot_jdk/8.0.312-7/x64/bin:/c/npm/prefix:/c/Program Files (x86)/Microsoft SDKs/Azure/CLI2/wbin:/c/ProgramData/kind:/c/Program Files/Eclipse Foundation/jdk-8.0.302.8-hotspot/bin:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/c/ProgramData/Chocolatey/bin:/c/Program Files/Docker:/c/Program Files/PowerShell/7:/c/Program Files/Microsoft/Web Platform Installer:/c/Program Files/dotnet:/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/170/Tools/Binn:/c/Program Files (x86)/Windows Kits/10/Windows Performance Toolkit:/c/Program Files (x86)/Microsoft SQL Server/110/DTS/Binn:/c/Program Files (x86)/Microsoft SQL Server/120/DTS/Binn:/c/Program Files (x86)/Microsoft SQL Server/130/DTS/Binn:/c/Program Files (x86)/Microsoft SQL Server/140/DTS/Binn:/c/Program Files (x86)/Microsoft SQL Server/150/DTS/Binn:/c/Program Files/nodejs:/c/Program Files/OpenSSL/bin:/c/Strawberry/c/bin:/c/Strawberry/perl/site/bin:/c/Strawberry/perl/bin:/c/ProgramData/chocolatey/lib/pulumi/tools/Pulumi/bin:/c/Program Files/TortoiseSVN/bin:/c/Program Files/CMake/bin:/c/ProgramData/chocolatey/lib/maven/apache-maven-3.8.4/bin:/c/Program Files/Microsoft Service Fabric/bin/Fabric/Fabric.Code:/c/Program Files/Microsoft SDKs/Service Fabric/Tools/ServiceFabricLocalClusterManager:/c/Program Files/Git/cmd:/c/Program Files/Git/mingw64/bin:/c/Program Files/Git/usr/bin:/c/tools/php:/c/Program Files (x86)/sbt/bin:/c/SeleniumWebDrivers/ChromeDriver:/c/SeleniumWebDrivers/EdgeDriver:/c/Program Files/Amazon/AWSCLIV2:/c/Program Files/Amazon/SessionManagerPlugin/bin:/c/Program Files/Amazon/AWSSAMCLI/bin:/c/Program Files (x86)/Google/Cloud SDK/google-cloud-sdk/bin:/c/Program Files (x86)/Microsoft BizTalk Server:/c/Program Files/LLVM/bin:/c/Users/runneradmin/.dotnet/tools:/c/Users/runneradmin/.cargo/bin:/c/Users/runneradmin/AppData/Local/Microsoft/WindowsApps'
          ls "/c/Program Files (x86)/"
          ls "/c/Program Files/"
          PATH="/c/msys64/usr/bin:$PATH"
          ls "/c/Program Files (x86)/"
          ls "/c/Program Files/"
          PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64:$PATH"
          7z --version
          tar --version

# github-virtual-environments:
#   needs: bootstrap
#   runs-on: ${{ matrix.os }}
#   strategy:
#     fail-fast: false
#     matrix:
#       os:
#         - ubuntu-20.04
#         - ubuntu-18.04
#         - macos-11
#         - macos-10.15
#         # - windows-2022
#         # - windows-2019
#         # - windows-2016
#   steps:
#     - uses: actions/download-artifact@v2
#       with: { name: bootstrap-output }
#     - run: tar -xvf fileinfo.tar
#     - run: ./configure
#     - run: cat src/config.h
#     - run: cat src/fileinfo/static.h
#     - run: make
#     - run: make check

# cross-platform-actions:
#   needs: bootstrap
#   runs-on: macos-10.15
#   strategy:
#     fail-fast: false
#     matrix:
#       os:
#         - name: freebsd
#           version: '13.0'
#         - name: freebsd
#           version: '12.2'
#         # - name: openbsd # compiler flag error
#         #   version: '6.9'
#         # - name: openbsd # compiler flag error
#         #   version: '6.8'
#         # - name: netbsd # action fails
#         #   version: '9.2'
#   steps:
#     - uses: actions/download-artifact@v2
#       with: { name: bootstrap-output }
#     - run: tar -xvf fileinfo.tar
#     - name: Test on ${{ matrix.os.name }}
#       uses: cross-platform-actions/action@v0.3.1
#       with:
#         operating_system: ${{ matrix.os.name }}
#         version: ${{ matrix.os.version }}
#         shell: bash
#         run: |
#           ./configure && \
#           cat src/config.h && \
#           cat src/fileinfo/static.h && \
#           make && \
#           make check

# vmactions-freebsd:
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/freebsd-vm@v0.1.5
#       with:
#         # prepare: |
#         #   pkg install -y gcc
#         run: |
#           pkg install --help
#           ./configure
#           make

# vmactions-solaris: # works but take a long time to run
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/solaris-vm@v0.0.3
#       with:
#         prepare: |
#           # pkgutil -U
#           pkgutil -y -i gcc5core
#         run: |
#           pkgutil --help
#           ./configure
#           make
