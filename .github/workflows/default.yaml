## Note that symbolic names are often duplicates of the numeric names.
## We keep both so that we automatically test new versions when those
## symbolic names get updated to newer versions.

## https://github.com/docker-library/official-images#architectures-other-than-amd64
## https://github.com/docker-library/bashbrew/blob/v0.1.2/architecture/oci-platform.go

## amd64         = linux/amd64
## arm32v5       = linux/arm/v5
## arm32v6       = linux/arm/v6
## arm32v7       = linux/arm/v7
## arm64v8       = linux/arm64/v8
## i386          = linux/386
## mips64le      = linux/mips64le
## ppc64le       = linux/ppc64le
## riscv64       = linux/riscv64
## s390x         = linux/s390x
## windows-amd64 = windows/amd64
on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # # Create the working directory
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=/workdir" >> $GITHUB_ENV
      # - if: ${{ env.cont != 0 }}
      #   run: echo "workdir=$workdir"
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

      # # Copy the artifact to the working directory
      # - if: ${{ env.cont != 0 }}
      #   uses: actions/download-artifact@v2
      #   with: { name: bootstrap-output }
      # - if: ${{ env.cont != 0 }}
      #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

      # # Install dependencies
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

      # # Build
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" ./configure
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make
      # - if: ${{ env.cont != 0 }}
      #   run: docker exec --workdir="$workdir" "$cont" make check

      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
  # shell:
  #   needs: bootstrap
  #   runs-on: windows-2019
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with: { name: bootstrap-output }
  #     - name: Setup tmate session
  #       uses: mxschmitt/action-tmate@v3

  windows:
    needs: bootstrap
    runs-on: windows-2019
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - shell: C:\msys64\usr\bin\bash.exe {0}
        run: |
          exec 2>&1
          set +e
          set -x
          echo "$PATH"
          PATH=''
          PATH="$PATH:/c/msys64/usr/bin"
          PATH="$PATH:/c/vcpkg"
          PATH="$PATH:/c/tools/zstd"
          PATH="$PATH:/c/hostedtoolcache/windows/stack/2.7.3/x64"
          PATH="$PATH:/c/Program Files (x86)/Microsoft SDKs/Azure/CLI2/wbin"
          PATH="$PATH:/c/ProgramData/kind"
          PATH="$PATH:/c/Windows/system32"
          PATH="$PATH:/c/Windows"
          PATH="$PATH:/c/Windows/System32/Wbem"
          PATH="$PATH:/c/Windows/System32/WindowsPowerShell/v1.0"
          PATH="$PATH:/c/Windows/System32/OpenSSH"
          PATH="$PATH:/c/Program Files/Docker"
          PATH="$PATH:/c/Program Files/PowerShell/7"
          PATH="$PATH:/c/Program Files/OpenSSL/bin"
          PATH="$PATH:/c/Program Files/CMake/bin"
          PATH="$PATH:/c/Users/runneradmin/AppData/Local/Microsoft/WindowsApps"

          # PATH="$PATH:/c/ProgramData/Chocolatey/bin" # has GCC
          # PATH="$PATH:/c/Strawberry/c/bin" # has GCC

          PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64:$PATH"

          echo ------------------- which ------------------
          ls "/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/"
          which gcc
          which cl

          tar -xvf fileinfo.tar
          ./configure
          cat config.log
          make check
      - run: dir
      - run: .\fileinfo-fields-dynamic
  # TODO: windows: gcc (msys, mingw, cygwin), cl (all versions)
# /c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/SDK/ScopeCppSDK/vc15/VC/bin/cl.exe
# /c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/arm/cl.exe

# github-virtual-environments:
#   needs: bootstrap
#   runs-on: ${{ matrix.os }}
#   strategy:
#     fail-fast: false
#     matrix:
#       os:
#         - ubuntu-20.04
#         - ubuntu-18.04
#         - macos-11
#         - macos-10.15
#         # - windows-2022
#         # - windows-2019
#         # - windows-2016
#   steps:
#     - uses: actions/download-artifact@v2
#       with: { name: bootstrap-output }
#     - run: tar -xvf fileinfo.tar
#     - run: ./configure
#     - run: cat src/config.h
#     - run: cat src/fileinfo/static.h
#     - run: make
#     - run: make check

# cross-platform-actions:
#   needs: bootstrap
#   runs-on: macos-10.15
#   strategy:
#     fail-fast: false
#     matrix:
#       os:
#         - name: freebsd
#           version: '13.0'
#         - name: freebsd
#           version: '12.2'
#         # - name: openbsd # compiler flag error
#         #   version: '6.9'
#         # - name: openbsd # compiler flag error
#         #   version: '6.8'
#         # - name: netbsd # action fails
#         #   version: '9.2'
#   steps:
#     - uses: actions/download-artifact@v2
#       with: { name: bootstrap-output }
#     - run: tar -xvf fileinfo.tar
#     - name: Test on ${{ matrix.os.name }}
#       uses: cross-platform-actions/action@v0.3.1
#       with:
#         operating_system: ${{ matrix.os.name }}
#         version: ${{ matrix.os.version }}
#         shell: bash
#         run: |
#           ./configure && \
#           cat src/config.h && \
#           cat src/fileinfo/static.h && \
#           make && \
#           make check

# vmactions-freebsd:
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/freebsd-vm@v0.1.5
#       with:
#         # prepare: |
#         #   pkg install -y gcc
#         run: |
#           pkg install --help
#           ./configure
#           make

# vmactions-solaris: # works but take a long time to run
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/solaris-vm@v0.0.3
#       with:
#         prepare: |
#           # pkgutil -U
#           pkgutil -y -i gcc5core
#         run: |
#           pkgutil --help
#           ./configure
#           make
