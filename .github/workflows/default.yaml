on: [workflow_dispatch]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  is-act:
    runs-on: ubuntu-latest
    outputs: {result: "${{ env.ACT }}"}
    steps: [{run: true}] ## Keep the schema happy
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          echo "Docker exit code: $?"
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          echo "cont=$cont"

          if test "x$cont" = "x"; then
            echo "::error ::Container launch failed (${{ matrix.platform }}, ${{ env.image }})."
            exit 1
          fi
      # Check platforms
      - run: whoami
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: echo "user=$(docker exec "$cont" whoami)" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "user=$user"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" mkdir "$workdir"
      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" chown -R "$user:$user" "$workdir"
      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --user=root "$cont" "$workdir"/bin/install-deps
      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/headers.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check
      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"
  virtual-environments: # Virtual environments from GitHub
    needs: bootstrap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macos-11
          - macos-10.15
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: tar -xvf fileinfo.tar
      - run: ./configure
      - run: cat src/config.h
      - run: cat src/headers.h
      - run: cat src/fileinfo/static.h
      - run: make
      - run: make check
      - run: ./fileinfo-fields-dynamic
      - run: ./fileinfo-file-dynamic .
        # sudo docker container ls|col1|xargs sudo docker container stop
        # sudo rm -rf .act-artifact-server/ && bin/update-workflows && sudo ~/.local/bin/act -j docker-chromebrew
        # sudo /usr/bin/docker run --rm --privileged tonistiigi/binfmt:latest --install all

        ## TODO: KaOS
        ## TODO: pclinuxos
        ## TODO: solus
        ## TODO: mint

        # QEMU: https://docs.openstack.org/image-guide/obtain-images.html
        # QEMU/Vagrant: https://app.vagrantup.com/boxes/search?utf8=%E2%9C%93&sort=updated&provider=&q=freebsd
        # QEMU: https://virtualboxes.org/images/
        # QEMU: https://github.com/palmercluff/qemu-images

        # Multics: https://hub.docker.com/r/rattydave/alpine-multics
        # Cray 1: https://hub.docker.com/r/rattydave/cray1
        # VM/370: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-vm370
        # MVS: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-mvs
        # System/370: https://hub.docker.com/r/rattydave/docker-ubuntu-hercules-tss
        # Multiple: https://hub.docker.com/r/rattydave/alpine-simh
        # Cloud 9: https://hub.docker.com/r/rattydave/cloud9

        # Multics:
        # - https://hackaday.com/2021/08/07/multics-gets-a-new-release-52-years-after-launch/
        # - https://multics-wiki.swenson.org/index.php/Main_Page#Latest_Release
        # - https://en.wikipedia.org/wiki/Multics
        # - https://web.mit.edu/multics-history/source/Multics_Internet_Server/Multics_sources.html 
        # - https://www.multicians.org/
        # - http://ringzero.wikidot.com/start

        # TODO: compiler: gcc, llvm, icc
        # TODO: pre-statx linux (and other kernel implementations)
        # TODO: WSLv1, WSLv2, different bash ports (MSYS,MingW,Cygwin,GitBash)
        # TODO: filesystems: zfs, btrfs, ext4

# cross-platform-actions:
#   needs: bootstrap
#   runs-on: macos-10.15
#   strategy:
#     fail-fast: false
#     matrix:
#       os:
#         - name: freebsd
#           version: '13.0'
#         - name: freebsd
#           version: '12.2'
#         # - name: openbsd # compiler flag error
#         #   version: '6.9'
#         # - name: openbsd # compiler flag error
#         #   version: '6.8'
#         # - name: netbsd # action fails
#         #   version: '9.2'
#   steps:
#     - uses: actions/download-artifact@v2
#       with: { name: bootstrap-output }
#     - run: tar -xvf fileinfo.tar
#     - name: Test on ${{ matrix.os.name }}
#       uses: cross-platform-actions/action@v0.3.1
#       with:
#         operating_system: ${{ matrix.os.name }}
#         version: ${{ matrix.os.version }}
#         shell: bash
#         run: |
#           ./configure && \
#           cat src/config.h && \
#           cat src/fileinfo/static.h && \
#           make && \
#           make check

# vmactions-freebsd:
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/freebsd-vm@v0.1.5
#       with:
#         # prepare: |
#         #   pkg install -y gcc
#         run: |
#           pkg install --help
#           ./configure
#           make

# vmactions-solaris: # works but take a long time to run
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/solaris-vm@v0.0.3
#       with:
#         prepare: |
#           # pkgutil -U
#           pkgutil -y -i gcc5core
#         run: |
#           pkgutil --help
#           ./configure
#           make
