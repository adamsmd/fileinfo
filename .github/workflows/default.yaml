on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar
  docker-steps:
    if: false
    runs-on: ubuntu-latest
    steps:
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0
      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform linux/${{ matrix.platform }} ${{ env.image }} tail -f /dev/null)
          set -e

          echo "cont=$cont" >> $GITHUB_ENV

          echo "contX=$cont"
          echo "requiredX=$required"
          echo "::debug::cont=$cont"
          echo "::debug::required=$required"
      - name: Fail if required but missing
        # if: ${{ env.required == 1 && env.cont == 0 }}
        if: ${{ env.cont == 0 }}
        run: 'false'
      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
        # # Create the working directory
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=/workdir" >> $GITHUB_ENV
        # - if: ${{ env.cont != 0 }}
        #   run: echo "workdir=$workdir"
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --user=root "$cont" mkdir --mode=0777 "$workdir"

        # # Copy the artifact to the working directory
        # - if: ${{ env.cont != 0 }}
        #   uses: actions/download-artifact@v2
        #   with: { name: bootstrap-output }
        # - if: ${{ env.cont != 0 }}
        #   run: docker cp - <fileinfo.tar "$cont":"$workdir"

        # # Install dependencies
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" bin/install-deps

        # # Build
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" ./configure
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/config.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make
        # - if: ${{ env.cont != 0 }}
        #   run: docker exec --workdir="$workdir" "$cont" make check

        # # Cleanup
        # - if: ${{ env.cont != 0 }}
        #   run: docker stop "$cont"
        # - if: ${{ env.cont != 0 }}
        #   run: docker rm --force --volumes "$cont"
  github-virtual-environments:
    needs: bootstrap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macos-11
          - macos-10.15
          # - windows-2022
          # - windows-2019
          # - windows-2016
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: tar -xvf fileinfo.tar
      - run: ./configure
      - run: cat src/config.h
      - run: cat src/fileinfo/static.h
      - run: make
      - run: make check
  cross-platform-actions:
    needs: bootstrap
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: freebsd
            version: '13.0'
          - name: freebsd
            version: '12.2'
            # - name: openbsd # compiler flag error
            #   version: '6.9'
            # - name: openbsd # compiler flag error
            #   version: '6.8'
            # - name: netbsd # action fails
            #   version: '9.2'
    steps:
      - uses: actions/download-artifact@v2
        with: {name: bootstrap-output}
      - run: tar -xvf fileinfo.tar
      - name: Test on ${{ matrix.os.name }}
        uses: cross-platform-actions/action@v0.3.1
        with:
          operating_system: ${{ matrix.os.name }}
          version: ${{ matrix.os.version }}
          shell: bash
          run: |
            ./configure && \
            cat src/config.h && \
            cat src/fileinfo/static.h && \
            make && \
            make check

# vmactions-freebsd:
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/freebsd-vm@v0.1.5
#       with:
#         # prepare: |
#         #   pkg install -y gcc
#         run: |
#           pkg install --help
#           ./configure
#           make

# vmactions-solaris: # works but take a long time to run
#   needs: bootstrap
#   runs-on: macos-10.15
#   steps:
#     - uses: actions/download-artifact@v2
#       with:
#         name: bootstrap-output
#     - run: tar -xvf fileinfo.tar
#     - uses: vmactions/solaris-vm@v0.0.3
#       with:
#         prepare: |
#           # pkgutil -U
#           pkgutil -y -i gcc5core
#         run: |
#           pkgutil --help
#           ./configure
#           make
