on: [push]
jobs:

  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../libstat.tar --exclude .git .
      - run: mv ../libstat.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: libstat.tar

  vm:
    needs: bootstrap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macos-11
          - macos-10.15
          # - windows-2022
          # - windows-2019
          # - windows-2016
        # TODO: arch: TODO: X86, X64, ARM, and ARM64
        # TODO: gcc, llvm, icc
        # TODO: pre-statx linux (and other kernel implementations)
        # TODO: build from make dist
        # TODO: WSLv1, WSLv2, different bash ports (MSYS,MingW,Cygwin,GitBash)
        # TODO: test linux w/o statx
        # setup-qemu
        # TODO: filesystems: zfs, btrfs, ext4
    steps:
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: tar -xvf libstat.tar
      - run: ./configure
      - run: make

  cross-platform-actions:
    needs: bootstrap
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: freebsd
            version: '13.0'
          - name: freebsd
            version: '12.2'
          # - name: openbsd # compiler flag error
          #   version: '6.9'
          # - name: openbsd # compiler flag error
          #   version: '6.8'
          # - name: netbsd # action fails
          #   version: '9.2'
    steps:
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: tar -xvf libstat.tar
      - name: Test on ${{ matrix.os.name }}
        uses: cross-platform-actions/action@v0.3.1
        with:
          operating_system: ${{ matrix.os.name }}
          version: ${{ matrix.os.version }}
          shell: bash
          run: |
            ./configure && make

  # vmactions-freebsd:
  #   needs: bootstrap
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: bootstrap-output
  #     - run: tar -xvf libstat.tar
  #     - uses: vmactions/freebsd-vm@v0.1.5
  #       with:
  #         # prepare: |
  #         #   pkg install -y gcc
  #         run: |
  #           pkg install --help
  #           ./configure
  #           make

  # vmactions-solaris: # works but take a long time to run
  #   needs: bootstrap
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: bootstrap-output
  #     - run: tar -xvf libstat.tar
  #     - uses: vmactions/solaris-vm@v0.0.3
  #       with:
  #         prepare: |
  #           # pkgutil -U
  #           pkgutil -y -i gcc5core
  #         run: |
  #           pkgutil --help
  #           ./configure
  #           make

  docker:
    needs: bootstrap
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container:
          ## Note that some symbolic names are duplicates of the numeric names.
          ## We keep both so that we automatically test new versions when those
          ## symbolic names get updated to newer versions.

          ## Images from https://hub.docker.com/search?type=image&image_filter=official&category=os

          - alpine:latest # works
          - alpine:3.15 # works
          - alpine:3.14 # works
          - alpine:3.13 # works
          - alpine:3.12 # works

          - ubuntu:latest # works
          - ubuntu:22.04 # works
          - ubuntu:21.10 # works
          - ubuntu:21.04 # works
          - ubuntu:20.04 # works
          # - ubuntu:18.04 # compile error
          # - ubuntu:16.04 # compile error
          # - ubuntu:14.04 # compile error

          - centos:latest # works
          - centos:8 # works
          # - centos:7 # compile error
          # - centos:6.10 # yum error
          # - centos:6 # yum error

          - debian:latest # works
          - debian:unstable # works
          - debian:testing # works
          - debian:stable # works
          - debian:oldstable # works
          # - debian:oldoldstable # compile error
          - debian:11.2 # works
          - debian:10.11 # works
          # - debian:9.13 # compile error

          - fedora:latest # works
          - fedora:rawhide # works
          - fedora:36 # works
          - fedora:35 # works
          - fedora:34 # works
          - fedora:33 # works

          - amazonlinux:latest # works
          - amazonlinux:2 # works
          - amazonlinux:1 # works

          - oraclelinux:8 # works
          # - oraclelinux:7 # compile error

          - ros:latest # works
          ## Rolling release
          - ros:rolling # works
          ## ROS 2
          - ros:galactic # works
          - ros:foxy # works
          ## ROS 1
          - ros:noetic # works
          - ros:melodic # works

          ## VmWare Photon
          # - photon:latest # needs coreutils but is also missing `as`

          # - clearlinux:latest # slow install

          # - mageia:latest # slow install
          # - mageia:cauldron # slow install
          # - mageia:8 # slow install
          # - mageia:7 # slow install

          - rockylinux:latest # works
          - rockylinux:8 # works

          ## Scientific Linux
          # - sl:latest # compile error
          # - sl:7 # compile error

          ## For IBM Z
          # - clefos:latest
          # - clefos:7

          - almalinux:latest # works
          # - almalinux:minimal # no c compiler
          - almalinux:8 # works
          # - almalinux:8-minimal # no c compiler

          # - alt:latest # no c compiler
          # - alt:sisyphus # no c compiler
          # - alt:p10 # no c compiler
          # - alt:p9 # no c compiler

          # - archlinux:latest # no c compiler
          # - archlinux:base # no c compiler
          - archlinux:base-devel # works

          ## TODO: nixos?
          ## TODO: busybox?

          ## Unsupported

          # - cirros:latest # does not have a package manager

    steps:
      # Create a docker
      - run: |
          cont=$(docker run --pull=missing --detach ${{ matrix.container }} tail -f /dev/null)
          echo "cont=$cont" >> $GITHUB_ENV
      - run: echo "::notice ::cont=$cont"

      # Create the working directory
      - run: echo "workdir=/workdir" >> $GITHUB_ENV
      - run: echo "::notice ::workdir=$workdir"
      - run: docker exec "$cont" mkdir "$workdir"

      # Copy the artifact to the working directory
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: docker cp - <libstat.tar "$cont":"$workdir"

      # Install dependencies
      - run: docker exec --workdir="$workdir" "$cont" bin/install-deps

      # Build
      - run: docker exec --workdir="$workdir" "$cont" ./configure
      - run: docker exec --workdir="$workdir" "$cont" make

      # Cleanup
      - run: docker stop "$cont"
      - run: docker rm --force --volumes "$cont"

# act --container-architecture string    Architecture which should be used to run containers, e.g.: linux/amd64. If not specified, will use host default architecture. Requires Docker server API Version 1.41+. Ignored on earlier Docker server platforms.
