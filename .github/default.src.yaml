on: [push]
jobs:

  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: bin/bootstrap
      - run: tar -cvf ../fileinfo.tar --exclude .git .
      - run: mv ../fileinfo.tar .
      - uses: actions/upload-artifact@v2
        with:
          name: bootstrap-output
          path: fileinfo.tar

  github-virtual-environments:
    needs: bootstrap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macos-11
          - macos-10.15
          # - windows-2022
          # - windows-2019
          # - windows-2016
    steps:
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: tar -xvf fileinfo.tar
      - run: ./configure
      - run: cat src/config.h
      - run: cat src/fileinfo/static.h
      - run: make
      - run: make check

  cross-platform-actions:
    needs: bootstrap
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: freebsd
            version: '13.0'
          - name: freebsd
            version: '12.2'
          # - name: openbsd # compiler flag error
          #   version: '6.9'
          # - name: openbsd # compiler flag error
          #   version: '6.8'
          # - name: netbsd # action fails
          #   version: '9.2'
    steps:
      - uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - run: tar -xvf fileinfo.tar
      - name: Test on ${{ matrix.os.name }}
        uses: cross-platform-actions/action@v0.3.1
        with:
          operating_system: ${{ matrix.os.name }}
          version: ${{ matrix.os.version }}
          shell: bash
          run: |
            ./configure && \
            cat src/config.h && \
            cat src/fileinfo/static.h && \
            make && \
            make check

  # vmactions-freebsd:
  #   needs: bootstrap
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: bootstrap-output
  #     - run: tar -xvf fileinfo.tar
  #     - uses: vmactions/freebsd-vm@v0.1.5
  #       with:
  #         # prepare: |
  #         #   pkg install -y gcc
  #         run: |
  #           pkg install --help
  #           ./configure
  #           make

  # vmactions-solaris: # works but take a long time to run
  #   needs: bootstrap
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: bootstrap-output
  #     - run: tar -xvf fileinfo.tar
  #     - uses: vmactions/solaris-vm@v0.0.3
  #       with:
  #         prepare: |
  #           # pkgutil -U
  #           pkgutil -y -i gcc5core
  #         run: |
  #           pkgutil --help
  #           ./configure
  #           make

  docker-strategy:
    if: false
    runs-on: ubuntu-latest
    strategy: &docker-strategy
      fail-fast: false
      matrix:
        image:
          ## Note that symbolic names are often duplicates of the numeric names.
          ## We keep both so that we automatically test new versions when those
          ## symbolic names get updated to newer versions.

          # 386 amd64 arm/v6 arm/v7 arm64/v8 ppc64le s390x
          ## A small distribution optimized for containers
          - alpine:latest # works
          - alpine:3.15 # works
          - alpine:3.14 # works
          - alpine:3.13 # works
          - alpine:3.12 # works

          # amd64 arm/v7 arm64/v8 ppc64le riscv64 s390x
          - ubuntu:latest # works
          - ubuntu:22.04 # works
          - ubuntu:21.10 # works
          - ubuntu:21.04 # works
          - ubuntu:20.04 # works
          - ubuntu:18.04 # works
          - ubuntu:16.04 # works
          - ubuntu:14.04 # works

          # 386? amd64 arm/v7? arm64/v8 ppc64le
          - centos:latest # works
          - centos:8 # works
          - centos:7 # works
          # - centos:6.10 # yum error
          # - centos:6 # yum error

          # 386 amd64 arm/v5 arm/v7 arm64/v8 mips64le ppc64le riscv64 s390x
          - debian:latest # works
          - debian:unstable # works
          - debian:testing # works
          - debian:stable # works
          - debian:oldstable # works
          - debian:oldoldstable # works
          - debian:11.2 # works
          - debian:10.11 # works
          - debian:9.13 # works

          # amd64 arm/v7? arm64/v8 ppc64le s390x
          - fedora:latest # works
          - fedora:rawhide # works
          - fedora:36 # works
          - fedora:35 # works
          - fedora:34 # works
          - fedora:33 # works

          # amd64 arm64/v8
          - amazonlinux:latest # works
          - amazonlinux:2 # works
          - amazonlinux:1 # works

          # amd64 arm64/v8
          - oraclelinux:8 # works
          - oraclelinux:7 # works

          # amd64 arm64/v8 arm/v7?
          ## Robot operating system
          - ros:latest # works
          #### Rolling release
          - ros:rolling # works
          #### ROS 2
          - ros:galactic # works
          - ros:foxy # works
          #### ROS 1
          - ros:noetic # works
          - ros:melodic # works

          ## VmWare Photon
          # - photon:latest # needs coreutils but is also missing `as`

          # - clearlinux:latest # slow install

          # - mageia:latest # slow install
          # - mageia:cauldron # slow install
          # - mageia:8 # slow install
          # - mageia:7 # slow install

          # amd64 arm64/v8
          - rockylinux:latest # works
          - rockylinux:8 # works

          # amd64
          ## Scientific Linux
          - sl:latest # works
          - sl:7 # works

          ## For IBM Z
          # s390x
          # - clefos:latest
          # - clefos:7

          # amd64 arm64/v8
          - almalinux:latest # works
          # - almalinux:minimal # no c compiler
          - almalinux:8 # works
          # - almalinux:8-minimal # no c compiler

          # 386 amd64 arm/v7 arm64/v8 ppc64le
          - alt:latest # works
          - alt:sisyphus # works
          - alt:p10 # works
          - alt:p9 # works

          # amd64
          # - archlinux:latest # no c compiler
          # - archlinux:base # no c compiler
          - archlinux:base-devel # works

          # - openwrtorg/rootfs:x86-64 # no c compiler
          # - openwrtorg/rootfs:armvirt-32
          # - openwrtorg/rootfs:armvirt-64

          # - openmandriva/cooker # no c compiler
          # - openmandriva/4.2 # no c compiler
          # - openmandriva/4.0
          # - openmandriva/3.0

          # - opensuse/leap:latest
          # - opensuse/leap:15
          # - opensuse/leap:42
          # - opensuse/tumbleweed # no c compiler
          # - opensuse/s390x

          # - vbatts/slackware:latest # no c compiler
          # - vbatts/slackware:current
          # - vbatts/slackware:14.2
          # - vbatts/slackware:14.1
          # - vbatts/slackware:14.0
          # - vbatts/slackware:13.1
          # - vbatts/slackware:13.0

          ## TODO: KaOS
          ## TODO: mint
          ## TODO: pclinuxos
          ## TODO: solus
          ## TODO: nixos?

          ## Unsupported

          # - cirros:latest # no package manager

    steps: &docker-steps
      # Setup multi-platform support for docker
      - uses: docker/setup-qemu-action@v1.2.0

      # Try to create a container for the given platform and image
      - name: Create container
        shell: bash
        run: |
          set +e
          cont=$(docker run --pull=missing --init --detach --platform ${{ env.platform }} ${{ env.image }} tail -f /dev/null)
          # missing=$?
          set -e

          echo "cont=$cont" >> $GITHUB_ENV
          # echo "missing=$missing" >> $GITHUB_ENV

          echo "::notice ::cont=$cont"
          echo "::notice ::required=$required"
      - name: Fail if required but missing
        if: ${{ env.required == 1 && env.cont == 0 }}
        run: 'false'

      # Check platforms
      - run: uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a

      # Create the working directory
      - if: ${{ env.cont != 0 }}
        run: echo "workdir=/workdir" >> $GITHUB_ENV
      - if: ${{ env.cont != 0 }}
        run: echo "::notice ::workdir=$workdir"
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" uname -a
      - if: ${{ env.cont != 0 }}
        run: docker exec "$cont" mkdir "$workdir"

      # Copy the artifact to the working directory
      - if: ${{ env.cont != 0 }}
        uses: actions/download-artifact@v2
        with: { name: bootstrap-output }
      - if: ${{ env.cont != 0 }}
        run: docker cp - <fileinfo.tar "$cont":"$workdir"

      # Install dependencies
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" bin/install-deps

      # Build
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" ./configure
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/config.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" cat src/fileinfo/static.h
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make
      - if: ${{ env.cont != 0 }}
        run: docker exec --workdir="$workdir" "$cont" make check

      # Cleanup
      - if: ${{ env.cont != 0 }}
        run: docker stop "$cont"
      - if: ${{ env.cont != 0 }}
        run: docker rm --force --volumes "$cont"


  docker-386:
    env: { platform: linux/386, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-amd64:
    env: { platform: linux/amd64, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-arm_v6:
    env: { platform: linux/arm/v6, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-arm_v7:
    env: { platform: linux/arm/v7, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-arm64:
    env: { platform: linux/arm64, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-mips64:
    env: { platform: linux/mips64, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-mips64le:
    env: { platform: linux/mips64le, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-ppc64le:
    env: { platform: linux/ppc64le, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-riscv64:
    env: { platform: linux/riscv64, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy
  docker-s390x:
    env: { platform: linux/s390x, image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy: *docker-strategy

  ## A small distribution optimized for containers
  docker-alpine:
    env: { platform: "linux/${{ matrix.arch }}", image: "${{ matrix.image }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        image:
          - alpine:latest # works
          - alpine:3.15 # works
          - alpine:3.14 # works
          - alpine:3.13 # works
          - alpine:3.12 # works
        arch:
          - 386
          - amd64
          - arm/v6
          - arm/v7
          - arm64/v8
          - ppc64le
          - s390x


  docker-qemu:
    env: { platform: linux/amd64, image: "qemu/${{ matrix.arch }}:latest" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - alpha
          - alpha-slim
          - amd64
          - amd64-slim
          - arm64
          - arm64-slim
          - armel
          - armel-slim
          - armhf
          - armhf-slim
          - hppa
          - hppa-slim
          - hurd-i386
          - hurd-i386-slim
          - i386
          - i386-slim
          - kfreebsd-amd64
          - kfreebsd-amd64-slim
          - kfreebsd-i386
          - kfreebsd-i386-slim
          - m68k
          - m68k-slim
          - mips
          - mips-slim
          - mipsel
          - mipsel-slim
          - powerpc
          - powerpc-slim
          - powerpcspe
          - powerpcspe-slim
          - ppc64
          - ppc64-slim
          - ppc64el
          - ppc64el-slim
          - s390x
          - s390x-slim
          - sh4
          - sh4-slim
          - sparc64
          - sparc64-slim
          - sparc64-slim-slim
          - x32
          - x32-slim

  docker-multiarch-alpine:
    env: { platform: linux/amd64, image: "multiarch/alpine:${{ matrix.arch }}-${{ matrix.version }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i386
          - ppc64le
          - arm64
          - x86_64
          - armv7
          - armhf
          - aarch64
          - x86
        version:
          - latest-stable
          - edge
          - v3.14
          - v3.13
          - v3.12
          - v3.11

  docker-multiarch-ubuntu-core:
    env: { platform: linux/amd64, image: "multiarch/ubuntu-core:${{ matrix.arch }}-${{ matrix.version }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
          - armhf
          - i386
          - ppc64el
          - s390x
          - x86_64
        version:
          - artful
          - bionic
          - eoan
          - focal
          - hirsute
          - trusty
          - xenial
          - yakkety

  docker-multiarch-ubuntu-debootstrap:
    env: { platform: linux/amd64, image: "multiarch/ubuntu-debootstrap:${{ matrix.arch }}-${{ matrix.version }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - armhf
          - i386
          - ppc64el
          - powerpc
        version:
          - artful
          - artful-slim
          - bionic
          - bionic-slim
          - focal
          - focal-slim
          - eoan
          - eoan-slim
          - hirsute
          - hirsute-slim
          - trusty
          - trusty-slim
          - xenial
          - xenial-slim
          - yakkety
          - yakkety-slim
          - zesty
          - zesty-slim

  docker-multiarch-debian-debootstrap:
    env: { platform: linux/amd64, image: "multiarch/debian-debootstrap:${{ matrix.arch }}-${{ matrix.version }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - armel
          - armhf
          - i386
          - mips
          - mips64el
          - mipsel
          - powerpc
          - ppc64el
          - s390x
        version:
          - bullseye
          - bullseye-slim
          - buster
          - buster-slim
          - jessie
          - jessie-slim
          - sid
          - sid-slim
          - stretch
          - stretch-slim
          - wheezy
          - wheezy-slim

  docker-multiarch-fedora:
    env: { platform: linux/amd64, image: "multiarch/fedora:${{ matrix.version }}-${{ matrix.arch }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64
          - ppc64le
          - s390x
          - x86_64
        version:
          - 34
          - 33
          - 32
          - 31
          - 30
          - 29
          - 28
          - 25
          - 24

  docker-multiarch-centos:
    env: { required: 1, platform: linux/amd64, image: "multiarch/centos:${{ matrix.version }}-clean" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        version:
          - 7
          - 7-aarch64
          - 7-amd64
          - 7-armhfp
          - 7-i386
          - 7-ppc64
          - 7-ppc64le
          - 7.3
          - 7.3-aarch64
          - 7.3-amd64
          - 7.3-armhfp
          - 7.3-ppc64
          - 7.3-ppc64le
          - 7.6
          - 7.6-amd64
          - 7.6-armhfp
          - aarch64
          - amd64
          - armhfp
          - i386
          - latest
          - ppc64
          - ppc64le

  docker-multiarch-voidlinux:
    env: { required: 1, platform: linux/amd64, image: "multiarch/voidlinux:${{ matrix.tag }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        tag:
          - amd64-latest
          - armhf-latest

  docker-multiarch-busybox:
    env: { required: 1, platform: linux/amd64, image: "multiarch/busybox:${{ matrix.tag }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        tag:
          - alpha
          - alpha-slim
          - amd64
          - amd64-slim
          - arm64
          - arm64-slim
          - armel
          - armel-slim
          - armhf
          - armhf-slim
          - hppa
          - hppa-slim
          - hurd-i386
          - hurd-i386-slim
          - i386
          - i386-slim
          - kfreebsd-amd64
          - kfreebsd-amd64-slim
          - kfreebsd-i386
          - kfreebsd-i386-slim
          - m68k
          - m68k-slim
          - mips
          - mips-slim
          - mipsel
          - mipsel-slim
          - powerpc
          - powerpc-slim
          - powerpcspe
          - powerpcspe-slim
          - ppc64
          - ppc64-slim
          - ppc64el
          - ppc64el-slim
          - s390x
          - s390x-slim
          - sh4
          - sh4-slim
          - sparc64
          - sparc64-slim
          - sparc64-slim-slim
          - x32
          - x32-slim

  docker-chromebrew: # ChromeOS
    env: { required: 1, platform: "${{ matrix.platform }}", image: "chromebrew/chromeos-${{ matrix.version }}:latest" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: armv7l-fievel-m91
            platform: linux/arm
          - version: armv7l-fievel-m92
            platform: linux/amd64
          - version: i686-alex-m58
            platform: linux/amd64
          - version: x86_64-kip-m92
            platform: linux/amd64
          - version: x86_64-nocturne-m90
            platform: linux/amd64

  docker-gentoo:
    env: { required: 1, platform: "${{ matrix.platform }}", image: "gentoo/stage3:${{ matrix.tag }}" }
    needs: bootstrap
    runs-on: ubuntu-latest
    steps: *docker-steps
    strategy:
      fail-fast: false
      matrix:
        include:
          - tag: latest
            platform: linux/386
          - tag: latest
            platform: linux/amd64
          - tag: latest linux
            platform: arm/v5
          - tag: amd64-hardened-nomultilib-openrc
            platform: linux/amd64
          - tag: amd64-hardened-openrc
            platform: linux/amd64
          - tag: amd64-musl
            platform: linux/amd64
          - tag: amd64-musl-hardened
            platform: linux/amd64
          - tag: amd64-nomultilib-openrc
            platform: linux/amd64
          - tag: amd64-nomultilib-systemd
            platform: linux/amd64
          - tag: amd64-openrc
            platform: linux/amd64
          - tag: amd64-systemd
            platform: linux/amd64
          - tag: arm64
            platform: linux/arm64
          - tag: arm64-systemd
            platform: linux/arm64
          - tag: armv5tel-openrc
            platform: linux/arm
          - tag: armv5tel-systemd
            platform: linux/arm
          - tag: armv6j_hardfp-openrc
            platform: linux/arm
          - tag: armv6j_hardfp-systemd
            platform: linux/arm
          - tag: armv6j-openrc
            platform: linux/arm
          - tag: armv6j-systemd
            platform: linux/arm
          - tag: armv7a_hardfp-openrc
            platform: linux/arm
          - tag: armv7a_hardfp-systemd
            platform: linux/arm
          - tag: armv7a-openrc
            platform: linux/arm
          - tag: armv7a-systemd
            platform: linux/arm
          - tag: hardened
            platform: linux/386
          - tag: hardened
            platform: linux/amd64
          - tag: hardened-nomultilib
            platform: linux/amd64
          - tag: i686-hardened-openrc
            platform: linux/386
          - tag: i686-musl
            platform: linux/386
          - tag: i686-openrc
            platform: linux/386
          - tag: i686-systemd
            platform: linux/386
          - tag: musl linux/386
            platform: linux/amd64
          - tag: musl-hardened
            platform: linux/amd64
          - tag: musl-hardened
            platform: linux/ppc64le
          - tag: nomultilib
            platform: linux/amd64
          - tag: nomultilib-systemd
            platform: linux/amd64
          - tag: ppc64le-musl-hardened-openrc
            platform: linux/ppc64le
          - tag: ppc64le-openrc
            platform: linux/ppc64le
          - tag: ppc64le-systemd
            platform: linux/ppc64le
          - tag: rv64_lp64-openrc
            platform: linux/riscv64
          - tag: rv64_lp64-systemd
            platform: linux/riscv64
          - tag: rv64_lp64d-openrc
            platform: linux/riscv64
          - tag: rv64_lp64d-systemd
            platform: linux/riscv64
          - tag: s390x
            platform: linux/s390x
          - tag: systemd
            platform: linux/386
          - tag: systemd
            platform: linux/amd64
          - tag: systemd linux
            platform: arm/v5


# Android
#   Android Wear
#   Android TV
# iOS

# SELinux

# TODO: arch: X86, X64, ARM, and ARM64
# TODO: compiler: gcc, llvm, icc
# TODO: pre-statx linux (and other kernel implementations)
# TODO: WSLv1, WSLv2, different bash ports (MSYS,MingW,Cygwin,GitBash)
# TODO: filesystems: zfs, btrfs, ext4
# TODO: setup-qemu

# act --container-architecture string    Architecture which should be used to run containers, e.g.: linux/amd64. If not specified, will use host default architecture. Requires Docker server API Version 1.41+. Ignored on earlier Docker server platforms.


#arm32v5
#winamd64
#windows-amd64



### Arch as user
# amd64
# arm32v5
# arm32v6
# arm32v7
# arm64v8
# i386
# mips64le
# ppc64le
# riscv64
# s390x

# winamd64
