#!/bin/sh

# Ensure that a c compiler and make are installed.  (This script is mostly to
# for Docker containers, which often don't have these already installed.)

note_using="Installing dependencies using"

try () {
  if "$@" >/dev/null 2>&1; then
    if [ "x$1" = "xwhich" ]; then shift; fi
    echo "$note_using" "$1"
    echo "::set-output name=package-manager::$1"
    return 0
  else
    return 1
  fi
}

if try apt-get --version; then
  export DEBIAN_FRONTEND=noninteractive
  apt-get update # TODO: test if we can omit
  apt-get install --assume-yes make
  apt-get install --assume-yes gcc \
    || apt-get install --assume-yes gcc5 # For Alma Linux p8
elif try dnf --version; then
  dnf install --assumeyes gcc make glibc-devel
elif try tdnf --version; then
  tdnf install --assumeyes gcc make
  # For Photon Linux
  tdnf erase --assumeyes toybox || true
  tdnf install --assumeyes coreutils sed gawk binutils glibc-devel linux-api-headers || true
elif try microdnf --help; then
  microdnf install --assumeyes gcc make
elif try yum --version; then
  yum install --assumeyes gcc make
elif try zypper --version; then
  zypper install --no-confirm gcc make
elif try pacman --version; then
  yes | pacman --sync --refresh gcc make
elif try apk --version; then
  apk add --no-cache gcc libc-dev make
elif try swupd --version; then
  swupd bundle-add --assume=yes c-basic make
elif try urpmi --version; then
  urpmi --auto gcc make
elif try slackpkg --version; then
  slackpkg update
  # Slackware, as a mater of policy, doesn't install dependencies so this list
  # is longer than the others
  slackpkg install \
    binutils \
    flex \
    gc \
    gcc \
    glibc \
    glibc-devel \
    guile \
    kernel-headers \
    libffi \
    libmpc \
    make \
  || true
elif try opkg --version; then
  mkdir /var/lock || true
  opkg update
  opkg install diffutils gcc make
elif try which crew; then
  # We don't need to install anything but the ld config needs to be updated to
  # include /usr/local/lib64.  (I don't know why it isn't already there.) Also
  # has to be sudo not just running as root for some reason.
  sudo ldconfig /usr/local/lib64
elif try xbps-install --version; then
  xbps-install --sync
  xbps-install --yes gcc make
else
  echo "$note_using" '<nothing>'
  echo "::set-output name=package-manager::<nothing>"
fi
