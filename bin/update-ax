#!/usr/bin/env perl

use strict;
use warnings;
use diagnostics;

use File::Copy;

print("################################\n");
print("# Setting up\n");
print("################################\n");

my $tmp = `mktemp --tmpdir --directory fileinfo-update-ax-tmp.XXXXXXXXXX`;

chomp $tmp;

`git clone https://git.savannah.gnu.org/git/autoconf-archive.git $tmp`;

unlink for <m4/*>;

my %index;

for my $file (<$tmp/m4/*>) {
  open(FILE, $file);
  while (<FILE>) {
    if (/AC_DEFUN[A-Za-z09]*\(\[([A-Za-z0-9_]+)\]/) {
      $index{$1} = $file;
    }
  }
}

print("\n");
print("################################\n");
print("# Iterating\n");
print("################################\n");

my $iterations = 0;
while (1) {
  print("\n");
  print("################################\n");
  print("# Iteration $iterations\n");
  print("################################\n");

  `bin/clean`;

  my $output = `{
    { autoreconf --verbose --install --warnings=all; };
    autoreconf --verbose --install && ./configure; } 2>&1 1>/dev/null`;

  last if $? == 0;

  for my $macro ($output =~ /([A-Z]{2}[A-Za-z0-9_]+)/g) {
    if (my $file = $index{$macro}) {
      print("Need macro $macro, so copying file $file\n");
      copy($file, "m4/");
    } else {
      print("Need macro $macro, but could not find file\n");
    }
  }

  $iterations++;
}

print("\n");
print("################################\n");
print("# Done iterating\n");
print("################################\n");

print("\n");
print("################################\n");
print("# Cleaning up\n");
print("################################\n");

unlink('autoconf-archive/');

print("\n");
print("################################\n");
print("# Done after $iterations iterations\n");
print("################################\n");
